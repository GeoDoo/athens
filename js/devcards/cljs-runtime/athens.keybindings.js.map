{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__56031","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__56032","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__56035","_","athens.keybindings/block-end?","map__56038","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/dec-cycle","min","max","v","athens.keybindings/inc-cycle","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","uid","state","map__56040","map__56041","cljs.core/deref","top-row?","bottom-row?","results","type","selected-items","re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1","direction","and__4174__auto__","cljs.core/seq","re-frame.core/dispatch","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","athens.keybindings/slash-options","cur-index","container-el","js/document","next-el","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","athens.util/is-beyond-rect?","athens.util/scroll-if-needed","athens.keybindings/handle-tab","map__56044","block-zero?","athens.db/get-block","athens.keybindings/handle-escape","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day.cljs$core$IFn$_invoke$arity$1","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/select-slash-cmd","index","map__56046","vec__56047","atom-string","expansion","expand","cljs.core/fn?","replace-str","new-str","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","athens.keybindings/handle-enter","map__56051","map__56052","query","map__56055","title","clojure.string/replace-first","map__56057","first","new-tail","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__56059","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__56061","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__56063","close-pair","js/setTimeout","G__56065","G__56066","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__56067","G__56068","G__56069","G__56070","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__56072","possible-pair","p1__56071#","cljs.core/some","G__56074","G__56075","map__56076","cljs.core/last","athens.keybindings/is-character-key?","map__56078","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__56080","map__56081","new-query","goog.events.KeyCodes/SLASH","athens.db.search_in_block_content.cljs$core$IFn$_invoke$arity$1","athens.db.search_in_node_title.cljs$core$IFn$_invoke$arity$1","athens.keybindings/block-key-down","map__56084","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed get-day is-beyond-rect?]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(declare slash-options)\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max v]\n  (if (<= v min) max (dec v)))\n\n\n(defn inc-cycle\n  [min max v]\n  (if (>= v max) min (inc v)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [results type]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      (= type :slash) (cond\n                        (= :up direction) (do\n                                            (.. e preventDefault)\n                                            (swap! state update :search/index (partial dec-cycle 0 (max-idx slash-options)))\n                                            (let [cur-index (:search/index @state)\n                                                  container-el (. js/document getElementById \"slash-menu-container\")\n                                                  next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                              (when (is-beyond-rect? next-el (.. container-el -parentNode))\n                                                (.. next-el (scrollIntoView false {:behavior \"auto\"})))))\n                        (= :down direction) (do\n                                              (.. e preventDefault)\n                                              (swap! state update :search/index (partial inc-cycle 0 (max-idx slash-options)))\n                                              (let [cur-index (:search/index @state)\n                                                    container-el (. js/document getElementById \"slash-menu-container\")\n                                                    next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                                (when (is-beyond-rect? next-el container-el)\n                                                  (.. next-el (scrollIntoView false {:behavior \"auto\"}))))))\n\n      (or (= type :page) (= type :block))\n      (cond\n        (= key-code KeyCodes.UP) (do\n                                   (.. e preventDefault)\n                                   (swap! state update :search/index (partial dec-cycle 0 (max-idx results)))\n                                   (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                     (.getElementById js/document \"dropdown-menu\")))\n        (= key-code KeyCodes.DOWN) (do\n                                     (.. e preventDefault)\n                                     (swap! state update :search/index (partial inc-cycle 0 (max-idx results)))\n                                     (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                       (.getElementById js/document \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:search/type @state) (swap! state assoc :search/type nil)\n    :else (dispatch [:editing/uid nil])))\n\n\n;; TODO: some expansions require caret placement after\n;; fixme: perhaps not the best place to put this, but need to access from both blocks and keybindings\n(def slash-options\n  [[mui-icons/Done           \"Add Todo\"      \"{{[[TODO]]}} \" \"cmd-enter\"]\n   [mui-icons/Timer          \"Current Time\"  #(.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))]\n   [mui-icons/Today          \"Today\"         #(str \"[[\" (:title (get-day 0)) \"]] \")]\n   [mui-icons/Today          \"Tomorrow\"      #(str \"[[\" (:title (get-day -1)) \"]]\")]\n   [mui-icons/Today          \"Yesterday\"     #(str \"[[\" (:title (get-day 1)) \"]]\")]\n   [mui-icons/YouTube        \"YouTube Embed\" \"{{[[youtube]]: }}\"]\n   [mui-icons/DesktopWindows \"iframe Embed\"  \"{{iframe: }}\"]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n;; TODO: also replace typeahead characters that follow \"/\". may need event to find selectionStart\n(defn select-slash-cmd\n  [index state]\n  (let [{:keys [atom-string]} @state\n        [_ _ expansion _] (slash-options index)\n        expand (if (fn? expansion) (expansion) expansion)\n        replace-str (subs atom-string 0 (dec (count atom-string)))\n        new-str     (str replace-str expand)]\n    (swap! state merge {:search/index 0\n                        :search/type nil\n                        :atom-string  new-str})))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results type]} @state]\n    (.. e preventDefault)\n    (cond\n      (= type :slash) (select-slash-cmd index state)\n\n      ;; TODO: move caret beyond ]]\n      ;; auto-complete link\n      (= type :page)\n      (let [{:keys [node/title]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type  nil}))\n      ;; auto-complete block ref\n      (= type :block)\n      (let [{:keys [block/uid]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type nil}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/type :page)\n        double-parens? (swap! state assoc :search/type :block)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/type nil)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when (= \"/\" (last value))\n                (swap! state merge {:search/type nil\n                                    :search/query nil}))\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [query type]} @state\n        new-query (str query key)]\n    (cond\n      (= key-code KeyCodes.SLASH) (swap! state merge {:search/query \"\"\n                                                      :search/type :slash})\n\n      (= type :slash) (swap! state assoc :search/query new-str)\n\n      ;; when in-line search dropdown is open\n      (= type :block) (let [results (db/search-in-block-content query)]\n                        (swap! state assoc :search/query new-query)\n                        (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      (= type :page) (let [results (db/search-in-node-title query)]\n                       (swap! state assoc :search/query new-query)\n                       (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}